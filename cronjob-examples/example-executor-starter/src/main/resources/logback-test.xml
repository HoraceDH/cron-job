<!--
scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="10 seconds" debug="false">
    <property name="PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread%X{sourceThread}]%logger{24} - %msg%n"/>
    <property name="LOG_PATH" value="logs"/>

    <!--输出到控制台-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${PATTERN}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <!--打印debug日志-->
    <appender name="debugFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/debug.log.%d{yyyy-MM-dd-HH}.log.gz</fileNamePattern>
            <maxHistory>360</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${PATTERN}</pattern>
        </encoder>

        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--<level>DEBUG</level>-->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <!--打印警告日志-->
    <appender name="appFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/app.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/app.log.%d{yyyy-MM-dd-HH}.log.gz</fileNamePattern>
            <maxHistory>720</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${PATTERN}</pattern>
        </encoder>

        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <!--打印错误日志-->
    <appender name="errorFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/error.log.%d{yyyy-MM-dd-HH}.log.gz</fileNamePattern>
            <maxHistory>720</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${PATTERN}</pattern>
        </encoder>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 异步配置 -->
    <appender name="asyncDebugFileAppender" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="debugFileAppender"/>
        <queueSize>10000</queueSize>
    </appender>
    <appender name="asyncAppFileAppender" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="appFileAppender"/>
        <queueSize>10000</queueSize>
    </appender>
    <appender name="asyncErrorFileAppender" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="errorFileAppender"/>
        <queueSize>10000</queueSize>
    </appender>

    <!--屏蔽某个日志的打印，log_name为日志名-->
    <logger name="log_name" level="info" additivity="false"/>

    <!--这里控制输出到控制台或文件-->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="asyncDebugFileAppender"/>
        <appender-ref ref="asyncAppFileAppender"/>
        <appender-ref ref="asyncErrorFileAppender"/>
    </root>
</configuration>
